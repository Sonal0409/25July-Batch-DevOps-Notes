************************************
Master and slave set up:

1. Master machine and change the Jenkisn URL in Jenkins configure system section

Manage Jenkins --> configure system --> scroll down --> Jenkins Location-->give the latest Jenkins URL ==> save it

update the latest URL over there


2. For master and slave to communicate , you will need Agent port

By default it is disabled in jenkins. You need to enable it

Manage Jenkins --> Configure global security --> scroll down to Agent section ==> select random ==> save it


Slave set up:
***********************

Install the following tools:

Git installation:

yum install git -y


JAVA Installation

 yum install java-1.8.0-openjdk-devel

Maven Installation:
***************
yum install maven -y


Create the root directory/workspace on the slave for master to place the rmeote files and output files
*******************************
cd /tmp

mkdir jenkinsdir

We need to give permission to this directory, so that master can read and write int this directory

 chmod -R 777 /tmp/jenkinsdir

This is the path of directory

/tmp/jenkinsdir


******************************************

Connect Master to the Slave

*****************************************

Manage jenkins--> Manage nodes & clouds --> on left side click on New node

Give name as Jnekinsslave --> select permanent agent --> click on create


Name: already populated

Description: Slave is of Lunix OS

Number of executors: 1

here executors means, jobs that can be executed on the slave at a time

Remote root directory: /tmp/jenkinsdir

Label: jenkinsSlave

Usage: Only build jobs with label expression matching this node

Launch method:

how do you want to connect slave to master

1. Launch method : select==> launch agents via ssh

Host : private ip address of slave

Credentials:
Click on Add button --> click on jenkins button

Kind: SSH username with private key

id: jenkisnslave

description: slave credentials

Username: ec2-user

Private Key :  click on Enter directly ==> click on add button

Open the pem file of slave server using notepad in your downloads folder

and copy all the contents ==> CTL A + CTL C

and paste it under private key step

Click on add button


In credentials drop down select the credentials


Host Key Verification Strategy

> select Non verifying verification strategy

Availability : keep this node online as much as psosible

Tool location
********************

Location of tool git and java on the slave

git :  /usr/bin/git

java: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.amzn2.0.2.x86_64


Dispatching the jobs to slave & master:
********************

 pipeline{

  tools{
     jdk 'myjava'
     maven 'mymaven'
}
agent none 



stages{
    
    stage('Clone repo')
    {
      agent {label 'jenkinsSlave'}
      steps{
           
        git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'

               }

    }
 stage('Compile the code')
    {
        agent any
      steps{
       git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
       
      sh 'mvn compile'

               }

    } 
    
     stage('Code Review')
    {
        agent any
      steps{
           
      sh 'mvn pmd:pmd'

               }

    }


 stage('test the code')
    {
        agent {label 'jenkinsSlave'}
      steps{
       echo 'Testing'    
      sh 'mvn test'


               }
      
       post{

       success{
                    junit 'target/surefire-reports/*.xml'
               }
                }
    }

 stage('Coverage of the code')
    {
        agent {label 'jenkinsSlave'}
      steps{
        
      sh 'mvn cobertura:cobertura -Dcobertura.report.format=xml'


               }
      
       post{

       success{
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
               }
                }
    }


 stage('Package the code')
    {
    agent {label 'jenkinsSlave'}
      steps{
           
      sh 'mvn package'

               }

    }
    
}

}






